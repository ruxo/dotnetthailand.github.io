{"componentChunkName":"component---src-templates-docs-js","path":"/storage/postgres/docker-compose-for-postgres","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"9c5ce5f4-6f66-5d9d-ae3f-a1ec84206fa0","title":"Docker compose for Postgres","slug":"/storage/postgres/docker-compose-for-postgres"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker compose for Postgres\",\n  \"showMetadata\": true,\n  \"editable\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To use Postgres Docker compose, we need to create required files and add contents to them.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"main docker-compose.\", \"[yml/yaml]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initialize a database file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".env file\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"docker-compose.\", \"[yml/yaml]\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of docker-compose.\", \"[yml/yaml]\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yml\"\n  }, \"# docker-compose.[yml/yaml]\\n\\n# https://docs.docker.com/compose/compose-file/compose-file-v3/\\nversion: \\\"3.8\\\"\\n\\nservices:\\n  postgres:\\n    # https://hub.docker.com/_/postgres\\n    image: postgres:13\\n    restart: always\\n    container_name: postgres-db\\n    environment:\\n      POSTGRES_DB: my-db\\n      POSTGRES_USER: postgres\\n      POSTGRES_PASSWORD: 12345Abc$$ # escape $ with $$\\n    ports:\\n      - 5432:5432\\n    volumes:\\n      - pgdata:/var/lib/postgresql/data\\n      - ./init:/docker-entrypoint-initdb.d # Files will be executed in alphabetical order.\\n    networks:\\n      - compose_network\\n\\n# Create name volumes managed by Docker to not lose data when remove a container\\n# https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes\\nvolumes:\\n  pgdata:\\n\\nnetworks:\\n  compose_network:\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Initialize a database\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Put SQL files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"init\"), \" folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Files will be executed in alphabetical order.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"init/1.create-user-table.sql\"))), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"-- init/1.create-user-table.sql\\n\\nCREATE TABLE \\\"user\\\" (\\n  id SERIAL PRIMARY KEY,\\n  -- equivalent to id integer NOT NULL DEFAULT nextval('table_name_id_seq')\\n  first_name VARCHAR(50) NOT NULL,\\n  last_name VARCHAR(50) NOT NULL,\\n  date_of_birth DATE NOT NULL -- date only and no time portion\\n);\\n\\nINSERT INTO \\\"user\\\" VALUES (DEFAULT, 'Jose', 'Realman', '2018-01-01');\\n\\n/*\\n To test if a table created successfully, run\\n SELECT  * FROM \\\"user\\\" u\\n\\n Expected result:\\n\\nid  first_name  last_name   date_of_birth\\n1   Jose    Realman 2018-01-01\\n*/\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \".env file\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can control prefix of our volumes/networks by specific a value of COMPOSE_PROJECT_NAME\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of .env file\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# .env\\n\\n# https://docs.docker.com/compose/reference/envvars/#compose_project_name\\n# Explicitly set volume's prefix or use -P with a docker run command.\\nCOMPOSE_PROJECT_NAME=db-compose\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"File structure of our Postgres Docker compose\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tree . -a\\n.\\n\\u251C\\u2500\\u2500 .env\\n\\u251C\\u2500\\u2500 docker-compose.[yml/yaml]\\n\\u2514\\u2500\\u2500 init\\n    \\u2514\\u2500\\u2500 1.create-user-table.sql\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Optionally, set high performance Docker volume\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can also specify a volume driver such as pxd (Portworx) to achieve high performance read/write for container storage volumes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To use pxd driver, you need to install it by following instruction in\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.portworx.com/install-with-other/docker/standalone/\"\n  }, \"https://docs.portworx.com/install-with-other/docker/standalone/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update volumes in docker-compose.\", \"[yml/yaml]\", \" to:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yml\"\n  }, \"volumes:\\n  pgdata:\\n    driver: pxd\\n    external: false # If external set to false, the Portworx volume would be automatically created if the volume is not exist.\\n    driver_opts:\\n      size: 7 # 7 GB maximum size of storage volume\\n      repl: 3 # Replicate data across 3 storage volumes\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Useful Docker compose commands\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To launch a container\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"docker-compose up # docker compose up # if you use compose v2\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To launch a container as a background process\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"docker-compose up -d # docker compose up -d # if you use compose v2\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To remove a container with its volumes\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"docker-compose down --volumes # docker compose down --volumes # if you use compose v2\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Further Reading\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/docker/compose-cli\"\n  }, \"Compose v2\")))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Connect to a database server\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use these values to connect to a database server (Postgres):\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Host=localhost\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Port=5432\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Database=my-db\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Username=postgres\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Password=12345Abc$\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".NET connection string value: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Host=localhost;Port=5432;Database=my-db;Username=postgres;Password=12345Abc$\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#docker-composeymlyaml","title":"docker-compose.yml/yaml"},{"url":"#initialize-a-database","title":"Initialize a database"},{"url":"#env-file","title":".env file"},{"url":"#file-structure-of-our-postgres-docker-compose","title":"File structure of our Postgres Docker compose"},{"url":"#optionally-set-high-performance-docker-volume","title":"Optionally, set high performance Docker volume"},{"url":"#useful-docker-compose-commands","title":"Useful Docker compose commands"},{"url":"#further-reading","title":"Further Reading"},{"url":"#connect-to-a-database-server","title":"Connect to a database server"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"storage/postgres/docker-compose-for-postgres.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"9c5ce5f4-6f66-5d9d-ae3f-a1ec84206fa0"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}