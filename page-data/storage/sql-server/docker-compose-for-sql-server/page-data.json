{"componentChunkName":"component---src-templates-docs-js","path":"/storage/sql-server/docker-compose-for-sql-server","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"a0dc5f04-c726-5e61-98ce-7f059088eb19","title":"Docker compose for SQL Server","slug":"/storage/sql-server/docker-compose-for-sql-server"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Docker compose for SQL Server\",\n  \"showMetadata\": true,\n  \"editable\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To use SQL Server Docker compose, we need to create required files and add contents to them.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dockerfile, a custom docker image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"entrypoint.sh\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initialize.sh and init-db.sql for initializing a database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"docker-compose.yml\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".env file\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Dockerfile\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQL Server for Linux image does not have built in database initialization like MySQL or Postgres. Therefore, we need to create a custom image.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use an existing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mcr.microsoft.com/mssql/server:2019-CU11-ubuntu-18.04\"), \" image as a based image.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dockerfile\"))), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Dockerfile\\n\\n# https://hub.docker.com/_/microsoft-mssql-server\\nFROM mcr.microsoft.com/mssql/server:2019-CU11-ubuntu-18.04\\nEXPOSE 1433\\nWORKDIR /app\\n\\nCOPY ./entrypoint.sh ./\\nCOPY ./initialize.sh ./\\nCOPY ./init-db.sql ./\\n\\nUSER root\\nRUN chmod +x ./entrypoint.sh\\nRUN chmod +x ./initialize.sh\\n\\nENTRYPOINT [\\\"./entrypoint.sh\\\"]\\n\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"entrypoint.sh\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"entrypoint.sh is any entry point script that will be run when we launch a container\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This fill does two things, run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialize.sh\"), \" script and start a SQL server instance.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"#!/bin/bash\\n# entrypoint.sh\\n\\n# Exit immediately if a command exits with a non-zero status.\\nset -e\\n\\n# Run initialize.sh and start SQL Server\\n ./initialize.sh & /opt/mssql/bin/sqlservr\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"initialize.sh and init-db.sql\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialize.sh\"), \" is a Bash script that runs sqlcmd Utility and use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"init-db.sql\"), \" as a file input.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of initialize.sh\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"#!/bin/bash\\n# initialize.sh\\n\\n# How to connect to SQL Server:\\n# https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash#connect-to-sql-server\\n# sqlcmd Utility options: https://docs.microsoft.com/en-us/sql/tools/sqlcmd-utility?view=sql-server-ver15#syntax\\n\\nINPUT_SQL_FILE=\\\"init-db.sql\\\"\\nuntil /opt/mssql-tools/bin/sqlcmd -S localhost,1433 -U sa -P \\\"$MSSQL_SA_PASSWORD\\\" -i $INPUT_SQL_FILE > /dev/null 2>&1\\ndo\\n  echo -e \\\"\\\\033[31mSQL server is unavailable - sleeping\\\"\\n  sleep 1 # Sleep in a second\\ndone\\n\\necho -e \\\"\\\\033[31mDone initialize a database\\\"\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"init-db.sql\"), \" to store all SQL statements that will be executed after a SQL server instance is ready.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of init-db.sql:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"-- init-db.sql\\n\\nCREATE DATABASE [my-db];\\nUSE [my-db];\\n\\nCREATE TABLE [User] (\\n  Id INT NOT NULL IDENTITY(1,1),\\n  FirstName VARCHAR(50) NOT null,\\n  LastName VARCHAR(50) NOT NULL,\\n  DateOfBirth DATETIME NOT NULL\\n  CONSTRAINT PK_User_Id PRIMARY KEY (Id ASC)\\n);\\n\\nINSERT INTO [User] VALUES ('Jose', 'Realman', '2018-01-01');\\n\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"docker-compose.yml\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of docker-compose.yml\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yml\"\n  }, \"# docker-compose.yml\\n\\n# https://docs.docker.com/compose/compose-file/compose-file-v3/\\nversion: \\\"3.8\\\"\\n\\nservices:\\n\\n  db:\\n    build:\\n      context: .\\n      dockerfile: Dockerfile\\n    image: custom-sql-server-2019\\n    container_name: ${COMPOSE_PROJECT_NAME:?err}_db\\n    ports:\\n      - 1433:1433\\n    volumes:\\n      - mssql_data:/var/opt/mssql/data\\n      - mssql_log:/var/opt/mssql/log\\n      - mssql_backup:/var/opt/mssql/backup\\n\\n    # https://docs.docker.com/compose/compose-file/compose-file-v3/#environment\\n    environment:\\n      # List of SQL Server environment variables\\n      # https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15#environment-variables\\n      - ACCEPT_EULA=Y\\n      - MSSQL_PID=Express\\n      - MSSQL_SA_PASSWORD=12345Abc$$ # Escape $ with $$\\n\\n      - MSSQL_DATA_DIR=/var/opt/mssql/data\\n      - MSSQL_LOG_DIR=/var/opt/mssql/log\\n      - MSSQL_BACKUP_DIR=/var/opt/mssql/backup\\n\\n    networks:\\n      - compose_network\\n\\n# Create name volumes managed by Docker to not lose data when remove a container\\n# https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes\\nvolumes:\\n  mssql_data:\\n  mssql_log:\\n  mssql_backup:\\n\\nnetworks:\\n  compose_network:\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MSSQL_PID=Express\"), \" to configure SQL Server to Express edition.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \".env file\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can control prefix of our volumes/networks by specific a value of COMPOSE_PROJECT_NAME\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example content of .env file\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# .env\\n\\n# https://docs.docker.com/compose/reference/envvars/#compose_project_name\\n# Explicitly set volume's prefix or use -P with a docker run command.\\nCOMPOSE_PROJECT_NAME=sql_server_compose\\n\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"File structure of our SQL server Docker compose\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"tree . -a\\n.\\n\\u251C\\u2500\\u2500 .env\\n\\u251C\\u2500\\u2500 Dockerfile\\n\\u251C\\u2500\\u2500 docker-compose.yml\\n\\u251C\\u2500\\u2500 entrypoint.sh\\n\\u251C\\u2500\\u2500 init-db.sql\\n\\u2514\\u2500\\u2500 initialize.sh\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Connect to a database server\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use these values to connect to a database server:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Host=localhost\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Port=1433 (default port number, you can ignore)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Database=my-db\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Username=sa\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Password=12345Abc$\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".NET connection string value: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Server=localhost,1433; Database=my-db; User Id=sa; Password=12345Abc$;\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#dockerfile","title":"Dockerfile"},{"url":"#entrypointsh","title":"entrypoint.sh"},{"url":"#initializesh-and-init-dbsql","title":"initialize.sh and init-db.sql"},{"url":"#docker-composeyml","title":"docker-compose.yml"},{"url":"#env-file","title":".env file"},{"url":"#file-structure-of-our-sql-server-docker-compose","title":"File structure of our SQL server Docker compose"},{"url":"#connect-to-a-database-server","title":"Connect to a database server"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"storage/sql-server/docker-compose-for-sql-server.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"a0dc5f04-c726-5e61-98ce-7f059088eb19"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}