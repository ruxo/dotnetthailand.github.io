{"componentChunkName":"component---src-templates-docs-js","path":"/testing/gauge-and-taiko/setup-gauge","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"3383570a-457f-5888-a77a-699bbc8cceeb","title":"Setup Gauge","slug":"/testing/gauge-and-taiko/setup-gauge"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Setup Gauge\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Requirement\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node.js version >= 10.16.3 (LTS). Follow the instruction in the link below to install Node.js.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/nodesource/distributions/blob/master/README.md#debinstall\"\n  }, \"How to Install Node.js with Ubuntu apt-get\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yarn & Gauge\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a new shell.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Yarn with the following command:\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"sudo npm install -g yarn\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Gauge as a global tool with the following command.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"sudo npm install -g @getgauge/cli\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It will take a several minutes since installing Gauge needs Chromium.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gauge works cross platforms but for using Linux, you need to use sudo when install it.\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Verify all requirement\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a new shell and execute the following commands:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"yarn -v\\ngauge -v\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should get versions of Yarn and Gauge without any errors.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Create a new Gauge project with TypeScript template\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a new shell.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new folder for a Gauge project and initialize the project with TypeScript template.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"mkdir gauge-example\\ncd gauge-example\\ngauge init ts\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can change a folder name (project name) to any name that you want.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Tip\"), \" use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gauge init js\"), \" to create a Gauge project with JavaScript template.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install all Node.js packages with yarn.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn install\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Open and update the project with VS Code\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open the project folder with VS Code\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"code .\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install Gauge extension for VS Code\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In VS Code, click extension button on the left-hand side of the screen, search and install \\\"Gauge\\\" extension.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More information for Gauge extension \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=getgauge.gauge\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=getgauge.gauge\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".editorconfig\"), \" file at the root of the project with the following content:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# EditorConfig is awesome: https://EditorConfig.org\\n# top-most EditorConfig file\\nroot = true\\n\\n[*]\\n# Unix-style newlines with a newline ending every file\\nend_of_line = lf\\nindent_style = space\\nindent_size = 2\\ninsert_final_newline = true\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can add \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\\"editor.codeLens\\\": true\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".vscode/settings.json\"), \" to make sure code lens is always enable.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Gauge extension uses code lens for showing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run Scenario|Debug Scenario\"), \" option.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is the example content of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".vscode/settings.json\"))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"files.associations\\\": {\\n    \\\"*.spec\\\": \\\"gauge\\\",\\n    \\\"*.cpt\\\": \\\"gauge\\\"\\n  },\\n  \\\"editor.codeLens\\\": true,\\n}\\n\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Run the project from Ru Scenario option\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/specs/example.spec\"), \" file and you will find \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run Scenario\"), \" option above \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Display number of items\"), \" message\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Display number of items\"), \" is a test scenario.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Run Scenario\"), \" and a browser will be launched a todo app.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After a test has finished, you will get a successful result in the output window.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can view a test report from a link in the output window.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Run project from the command line\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open package.json at the root of the project and add the following code\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"  \\\"scripts\\\": {\\n    \\\"test\\\": \\\"gauge run specs\\\"\\n  }\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open VS integrated terminal.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run all tests in the project with the following command:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn test\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is the test result in a terminal\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ gauge run specs\\n# Getting Started with Gauge\\n  ## Display number of items     \\u2714 \\u2714 \\u2714 \\u2714 \\u2714 \\u2714\\n  ## Must list only active tasks         \\u2714 \\u2714 \\u2714 \\u2714 \\u2714 \\u2714 \\u2714\\n\\nSuccessfully generated html-report to => /home/aaron/projects/gauge-example/reports/html-report/index.html\\n\\nSpecifications: 1 executed      1 passed        0 failed        0 skipped\\nScenarios:      2 executed      2 passed        0 failed        0 skipped\\n\\nTotal time taken: 3.659s\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#requirement","title":"Requirement"},{"url":"#verify-all-requirement","title":"Verify all requirement"},{"url":"#create-a-new-gauge-project-with-typescript-template","title":"Create a new Gauge project with TypeScript template"},{"url":"#open-and-update-the-project-with-vs-code","title":"Open and update the project with VS Code"},{"url":"#run-the-project-from-ru-scenario-option","title":"Run the project from Ru Scenario option"},{"url":"#run-project-from-the-command-line","title":"Run project from the command line"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"testing/gauge-and-taiko/setup-gauge.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"3383570a-457f-5888-a77a-699bbc8cceeb"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}