{"componentChunkName":"component---src-templates-docs-js","path":"/testing/fluent-assertions","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"585eb6a6-8c12-52d8-8d84-1f2b5d156e92","title":"FluentAssertions","slug":"/testing/fluent-assertions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FluentAssertions\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u0E2A\\u0E21\\u0E21\\u0E15\\u0E34\\u0E27\\u0E48\\u0E32\\u0E40\\u0E23\\u0E32\\u0E21\\u0E35 Data Structure \\u0E14\\u0E31\\u0E07\\u0E19\\u0E35\\u0E49 \\u0E04\\u0E33\\u0E16\\u0E32\\u0E21\\u0E04\\u0E37\\u0E2D\\u0E40\\u0E23\\u0E32\\u0E08\\u0E30 Assert \\u0E2D\\u0E22\\u0E48\\u0E32\\u0E07\\u0E44\\u0E23\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"public class Todo\\n{\\n    public int ID  { get; set; }\\n    public string Title  { get; set; }\\n    public bool Completed  { get; set; }\\n}\\n\\npublic class TodoList\\n{\\n\\n    public IEnumerable<Todo> GetTodoList()\\n    {\\n        return new []\\n        {\\n            new Todo{\\n                ID = 0,\\n                Title = \\\"Shopping\\\",\\n                Completed = false\\n            },\\n            new Todo{\\n                ID = 1,\\n                Title = \\\"Running\\\",\\n                Completed = true\\n            },\\n            new Todo{\\n                ID = 2,\\n                Title = \\\"Reading a book\\\",\\n                Completed = false\\n            }\\n        };\\n    }\\n}\\n\")), mdx(\"p\", null, \"\\u0E16\\u0E49\\u0E32\\u0E43\\u0E0A\\u0E49 xUnit \\u0E2D\\u0E22\\u0E48\\u0E32\\u0E07\\u0E40\\u0E14\\u0E35\\u0E22\\u0E27 \\u0E2D\\u0E32\\u0E08\\u0E08\\u0E30\\u0E22\\u0E38\\u0E48\\u0E07\\u0E22\\u0E32\\u0E01 \\u0E25\\u0E2D\\u0E07\\u0E43\\u0E0A\\u0E49 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/FluentAssertions\"\n  }, \"FluentAssertions\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Getting Started\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u0E15\\u0E34\\u0E14\\u0E15\\u0E31\\u0E49\\u0E07 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/FluentAssertions\"\n  }, \"FluentAssertions\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"dotnet add package FluentAssertions --version 5.10.3\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u0E40\\u0E23\\u0E35\\u0E22\\u0E01 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"using FluentAssertions;\"), \" \\u0E41\\u0E25\\u0E49\\u0E27\\u0E40\\u0E23\\u0E32\\u0E2A\\u0E32\\u0E21\\u0E32\\u0E23\\u0E16\\u0E43\\u0E0A\\u0E49\\u0E07\\u0E32\\u0E19 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.nuget.org/packages/FluentAssertions\"\n  }, \"FluentAssertions\"), \" \\u0E44\\u0E14\\u0E49\\u0E40\\u0E25\\u0E22\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"using Xunit;\\nusing FluentAssertions;\\n\\npublic class TodoListTest\\n{\\n\\n    [Fact]\\n    public void GetTodoListTest()\\n    {\\n\\n        var todoList = new TodoList();\\n        var expected =  new []\\n        {\\n            new Todo{\\n                ID = 0,\\n                Title = \\\"Shopping\\\",\\n                Completed = false\\n            },\\n            new Todo{\\n                ID = 1,\\n                Title = \\\"Running\\\",\\n                Completed = true\\n            },\\n            new Todo{\\n                ID = 2,\\n                Title = \\\"Reading a book\\\",\\n                Completed = false\\n            }\\n        };\\n\\n        var result = todoList.GetTodoList();\\n        result.Should().BeEquivalentTo(expected);\\n    }\\n}\\n\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Ref\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://fluentassertions.com/\"\n  }, \"https://fluentassertions.com/\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#getting-started","title":"Getting Started"},{"url":"#ref","title":"Ref"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"testing/fluent-assertions.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"585eb6a6-8c12-52d8-8d84-1f2b5d156e92"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}