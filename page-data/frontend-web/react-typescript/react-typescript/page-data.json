{"componentChunkName":"component---src-templates-docs-js","path":"/frontend-web/react-typescript/react-typescript","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"9faf0f12-2e11-5a00-b730-daeb0f17ebe8","title":"React TypeScript","slug":"/frontend-web/react-typescript/react-typescript"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React TypeScript\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Prerequisite\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic HTML, JavaScript, CSS (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/\"\n  }, \"MDN Web Docs\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/getting-started.html\"\n  }, \"React\"), \", \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/thinking-in-react.html\"\n  }, \"Thinking in React\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JS ES6+ \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Object Destructuring\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrow Function\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Awesome TypeScript resources\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/piotrwitek/react-redux-typescript-guide\"\n  }, \"React & Redux in TypeScript - Complete Guide\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://react-typescript-cheatsheet.netlify.app/\"\n  }, \"React TypeScript Cheatsheets\")))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Setup TypeScript with React\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Prerequisites\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"familiarity with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/basic-types.html\"\n  }, \"TypeScript\"), \" Types (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://2ality.com/2018/04/type-notation-typescript.html\"\n  }, \"2ality's guide\"), \" is helpful. If you\\u2019re an absolute beginner in TypeScript, check out \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://ts.chibicode.com/todo/\"\n  }, \"chibicode\\u2019s tutorial\"), \".)\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"React + TypeScript Starter Kits\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Cloud setups:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://ts.react.new\"\n  }, \"CodeSandbox\"), \" - cloud IDE, boots up super fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackblitz.com/edit/react-typescript-base\"\n  }, \"Stackblitz\"), \" - cloud IDE, boots up super fast\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Local dev setups:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://facebook.github.io/create-react-app/docs/adding-typescript\"\n  }, \"Create React App\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npx create-react-app name-of-app --template typescript\"), \" will create in new folder\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://nextjs.org/docs/basic-features/typescript\"\n  }, \"Next.js\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"npx create-next-app -e with-typescript\"), \" will create in your current folder\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Getting Started with React TypeScript Template\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create app using \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npx create-react-app my-app --template typescript\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Enter to the directory\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"cd my-app\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You will see the project structure like this:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"my-app\\n\\u251C\\u2500\\u2500 package.json\\n\\u251C\\u2500\\u2500 public\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 favicon.ico\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 index.html\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 logo192.png\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 logo512.png\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 manifest.json\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 robots.txt\\n\\u251C\\u2500\\u2500 README.md\\n\\u251C\\u2500\\u2500 src\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 App.css\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 App.test.tsx\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 App.tsx\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 index.css\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 index.tsx\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 logo.svg\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 react-app-env.d.ts\\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 reportWebVitals.ts\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 setupTests.ts\\n\\u251C\\u2500\\u2500 tsconfig.json\\n\\u2514\\u2500\\u2500 yarn.lock\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Run React project using\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"yarn start\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"VS Code Extensions\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Refactoring help \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=paulshen.paul-typescript-toolkit\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=paulshen.paul-typescript-toolkit\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"React TypeScript Code Snippets:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=infeng.vscode-react-typescript\"\n  }, \"https://marketplace.visualstudio.com/items?itemName=infeng.vscode-react-typescript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.digitalocean.com/community/tutorials/the-best-react-extension-for-vs-code\"\n  }, \"https://www.digitalocean.com/community/tutorials/the-best-react-extension-for-vs-code\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TypeScript official extension \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://code.visualstudio.com/docs/languages/typescript\"\n  }, \"https://code.visualstudio.com/docs/languages/typescript\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Import React\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowSyntheticDefaultImports\\\": true\"), \" in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tsconfig.json\"), \", you can use more familiar imports:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Basic React with TypeScript\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Function Components\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These can be written as normal functions that take a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \" argument and return a JSX element.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Declaring type of props - see \\\"Typing Component Props\\\" for more examples\\ntype AppProps = {\\n  message: string;\\n}; /* use `interface` if exporting so that consumers can extend */\\n\\n// Easiest way to declare a Function Component; return type is inferred.\\nconst App = ({ message }: AppProps) => <div>{message}</div>;\\n\\n// you can choose annotate the return type so an error is raised if you accidentally return some other type\\nconst App = ({ message }: AppProps): JSX.Element => <div>{message}</div>;\\n\\n// you can also inline the type declaration; eliminates naming the prop types, but looks repetitive\\nconst App = ({ message }: { message: string }) => <div>{message}</div>;\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Tip: You might use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://marketplace.visualstudio.com/items?itemName=paulshen.paul-typescript-toolkit\"\n  }, \"Paul Shen's VS Code Extension\"), \" to automate the type destructure declaration (incl a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/_paulshen/status/1392915279466745857?s=20\"\n  }, \"keyboard shortcut\"), \").\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Hooks\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Hooks are \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a05cc538a42243c632f054e42eab483ebf1560ab/types/react/index.d.ts#L800-L1031\"\n  }, \"supported in \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"@types/react\"), \" from v16.8 up\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"useState\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Type inference works very well for simple values:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const [val, toggle] = useState(false);\\n// `val` is inferred to be a boolean\\n// `toggle` only takes booleans\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"useEffect\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \", take care not to return anything other than a function or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \", otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function DelayedEffect(props: { timerMs: number }) {\\n  const { timerMs } = props;\\n\\n  useEffect(\\n    () =>\\n      setTimeout(() => {\\n        /* do stuff */\\n      }, timerMs),\\n    [timerMs]\\n  );\\n  // bad example! setTimeout implicitly returns a number\\n  // because the arrow function body isn't wrapped in curly braces\\n  return null;\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Asynchronous useEffect\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\u0E2D\\u0E31\\u0E19\\u0E19\\u0E35\\u0E49\\u0E40\\u0E1B\\u0E47\\u0E19\\u0E15\\u0E31\\u0E27\\u0E2D\\u0E22\\u0E48\\u0E32\\u0E07\\u0E01\\u0E32\\u0E23 fetch \\u0E02\\u0E49\\u0E2D\\u0E21\\u0E39\\u0E25\\u0E04\\u0E23\\u0E31\\u0E49\\u0E07\\u0E41\\u0E23\\u0E01\\u0E40\\u0E21\\u0E37\\u0E48\\u0E2D Component \\u0E16\\u0E39\\u0E01\\u0E42\\u0E2B\\u0E25\\u0E14\\u0E19\\u0E30\\u0E04\\u0E23\\u0E31\\u0E1A\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function AsyncUseEffect() {\\n\\n  useEffect(\\n    () => asyncFetch(),\\n    []\\n  );\\n\\n  const asyncFetch = async () => {\\n      const result = await fetch(\\\"https://jsonplaceholder.typicode.com/todos/1\\\");\\n      console.log(result);\\n  }\\n  return null;\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For more Hook usage and complex type: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/hooks\"\n  }, \"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/hooks\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Mostly Used Prop Type\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface AppProps {\\n  children: React.ReactNode; // accepts everything\\n  style?: React.CSSProperties; // to pass through style props\\n  onChange?: React.FormEventHandler<HTMLInputElement>; // form events! the generic parameter is the type of event.target\\n  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring\\n}\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Useful React Prop Type Examples\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-typescript\"\n  }, \"interface AppProps {\\n  children1: JSX.Element; // bad, doesnt account for arrays\\n  children2: JSX.Element | JSX.Element[]; // meh, doesn't accept strings\\n  children3: React.ReactChildren; // despite the name, not at all an appropriate type; it is a utility\\n  children4: React.ReactChild[]; // better, accepts array children\\n  children: React.ReactNode; // best, accepts everything (see edge case below)\\n  functionChildren: (name: string) => React.ReactNode; // recommended function as a child render prop type\\n  style?: React.CSSProperties; // to pass through style props\\n  onChange?: React.FormEventHandler<HTMLInputElement>; // form events! the generic parameter is the type of event.target\\n  //  more info: https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase/#wrappingmirroring\\n  props: Props & React.ComponentPropsWithoutRef<\\\"button\\\">; // to impersonate all the props of a button element and explicitly not forwarding its ref\\n  props2: Props & React.ComponentPropsWithRef<MyButtonWithForwardRef>; // to impersonate all the props of MyButtonForwardedRef and explicitly forwarding its ref\\n}\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Ref\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://react-typescript-cheatsheet.netlify.app/\"\n  }, \"React TypeScript Cheat sheet\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#prerequisite","title":"Prerequisite"},{"url":"#awesome-typescript-resources","title":"Awesome TypeScript resources"}]},{"url":"#setup-typescript-with-react","title":"Setup TypeScript with React","items":[{"url":"#prerequisites","title":"Prerequisites"},{"url":"#react--typescript-starter-kits","title":"React + TypeScript Starter Kits"},{"url":"#getting-started-with-react-typescript-template","title":"Getting Started with React TypeScript Template"},{"url":"#vs-code-extensions","title":"VS Code Extensions"},{"url":"#import-react","title":"Import React"}]},{"url":"#basic-react-with-typescript","title":"Basic React with TypeScript","items":[{"url":"#function-components","title":"Function Components"},{"url":"#hooks","title":"Hooks"},{"url":"#usestate","title":"useState"},{"url":"#useeffect","title":"useEffect","items":[{"url":"#asynchronous-useeffect","title":"Asynchronous useEffect"}]}]},{"url":"#mostly-used-prop-type","title":"Mostly Used Prop Type","items":[{"url":"#useful-react-prop-type-examples","title":"Useful React Prop Type Examples"}]},{"url":"#ref","title":"Ref"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"frontend-web/react-typescript/react-typescript.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"9faf0f12-2e11-5a00-b730-daeb0f17ebe8"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}