{"componentChunkName":"component---src-templates-docs-js","path":"/web-frameworks/orchard-core-cms/create-content-type-content-item-programmatically","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"bc3abdd1-8c5a-5548-8057-374449d6239e","title":"Create a content type and a content item programmatically","slug":"/web-frameworks/orchard-core-cms/create-content-type-content-item-programmatically"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Create a content type and a content item programmatically\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Prerequisite\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We assume that you have a basic knowledge of how to create a custom Orchard Core CMS module. If not, you can learn it by following this content\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/web-frameworks/orchard-core-cms/create-a-custom-orchard-core-cms-module\"\n  }, \"\\\"Create a custom Orchard Core CMS module\\\"\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Code example of how to create a custom module is at \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/codesanook/orchard-examples\"\n  }, \"https://github.com/codesanook/orchard-examples\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We assume that we've already created a map part and its required components, e.g. driver, models, views.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This content will be focusing on how to create an event content type and an event content item from a map part programmatically.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Update a migration file\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We are going to update our existing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Migration.cs\"), \" in \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/web-frameworks/orchard-core-cms/create-a-custom-orchard-core-cms-module\"\n  }, \"\\\"Create a custom Orchard Core CMS module\\\"\"), \" content.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"However, you can apply this technique to create a content type and a content item programmatically for your requirement.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is the example code after updating:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"using OrchardCore.ContentManagement.Metadata.Settings;\\nusing OrchardCore.ContentManagement.Metadata;\\nusing OrchardCore.Data.Migration;\\nusing Codesanook.Map.Models;\\n\\nnamespace Codesanook.Map\\n{\\n    public class Migrations : DataMigration\\n    {\\n        IContentDefinitionManager _contentDefinitionManager;\\n        public Migrations(IContentDefinitionManager contentDefinitionManager) =>\\n          _contentDefinitionManager = contentDefinitionManager;\\n\\n        public int Create()\\n        {\\n            _contentDefinitionManager.AlterPartDefinition(\\n                nameof(MapPart),\\n                part => part\\n                    .Attachable()\\n                    .WithDescription(\\\"Provide a map part for a content item\\\")\\n            );\\n\\n            return 1;\\n        }\\n\\n        public async Task<int> UpdateFrom1Async()\\n        {\\n            CreateOrganizationProfilePart();\\n            CreateEventContentType();\\n            await CreateEventContentItemAsync();\\n\\n            return 2;\\n        }\\n\\n        private void CreateEventContentType()\\n        {\\n            _contentDefinitionManager.AlterTypeDefinition(\\n                \\\"Event\\\",\\n                type => type\\n                    .WithPart( nameof(AutoroutePart))\\n                    .WithPart(\\n                        nameof(TitlePart),\\n                        part => part.WithPosition(\\\"0\\\") // Move a title input at the top of an editor page in the admin panel.\\n                    )\\n                    .WithPart(\\n                        nameof(HtmlBodyPart),\\n                        part => part\\n                            .WithEditor(\\\"Wysiwyg\\\") // Use HTML what you see is what you get editor.\\n                            .WithPosition(\\\"1\\\")\\n                    )\\n                    .WithPart(\\n                        nameof(MapPart),\\n                        part => part.WithPosition(\\\"2\\\")\\n                    )\\n                    .Creatable()\\n                    .Listable()\\n            );\\n        }\\n\\n        private async Task CreateEventContentItemAsync()\\n        {\\n            var contentItem = await _contentManager.NewAsync(\\\"Event\\\");\\n            var titlePart  =contentItem.As<TitlePart>();\\n            titlePart.Title = \\\"Orchard Core CMS meetup\\\";\\n            contentItem.DisplayText = titlePart.Title; // Text box for a title part in an admin panel read a value from DisplayText\\n            titlePart.Apply(); // We need to explicitly call Apply to apply a change to content item\\n\\n            var htmlBodyPart = contentItem.As<HtmlBodyPart>();\\n            htmlBodyPart.Html = \\\"Orchard Core CMS meetup is coming soon\\\";\\n            htmlBodyPart.Apply();\\n\\n            var mapPart = contentItem.As<MapPart>();\\n            htmlBodyPart.Latitude = -25.344;\\n            htmlBodyPart.Longitude = 131.036;\\n            htmlBodyPart.Apply();\\n\\n            await _contentManager.CreateAsync(contentItem, VersionOptions.Published);\\n        }\\n    }\\n}\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note, because we use a strongly type of model parts e.g. TitlePart, HtmlBodyPart, AutoroutePath, we need to reference the following packages to our module project (.csproj file).\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"  <ItemGroup>\\n    <PackageReference Include=\\\"OrchardCore.Title\\\" Version=\\\"1.0.0-rc2-16349\\\" />\\n    <PackageReference Include=\\\"OrchardCore.Html\\\" Version=\\\"1.0.0-rc2-16349\\\" />\\n    <PackageReference Include=\\\"OrchardCore.Autoroute\\\" Version=\\\"1.0.0-rc2-16349\\\" />\\n  </ItemGroup>\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start a project with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet watch run\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet run\"), \", your migration version should be updated to version \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2\"), \" and a content type and a content item will be created successfully.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To check if an event content item is created properly, login to admin panel and navigate to Content > Content Items.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You will find your event content item created by `Migration.cs file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can check your current migration version in a database with the following SQL query (Work for SQL server only).\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"SELECT * WHERE [Type] = 'OrchardCore.Data.Migration.Records.DataMigrationRecord, OrchardCore.Data'\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#prerequisite","title":"Prerequisite"},{"url":"#update-a-migration-file","title":"Update a migration file"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"web-frameworks/orchard-core-cms/create-content-type-content-item-programmatically.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"bc3abdd1-8c5a-5548-8057-374449d6239e"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}