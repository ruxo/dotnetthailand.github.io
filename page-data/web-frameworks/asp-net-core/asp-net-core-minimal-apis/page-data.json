{"componentChunkName":"component---src-templates-docs-js","path":"/web-frameworks/asp-net-core/asp-net-core-minimal-apis","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"2788a651-ca70-5162-8020-036d265ccc30","title":"ASP.NET Core minimal APIs","slug":"/web-frameworks/asp-net-core/asp-net-core-minimal-apis"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ASP.NET Core minimal APIs\",\n  \"showMetadata\": true,\n  \"editable\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"A single file ASP.NET Core minimal APIs\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Install .NET 6 preview on WSL2 Ubuntu\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Fix Snap on WSL2\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enable systemd on WSL2 by running the following commands:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ cd ~\\n$ git clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git\\n$ cd ubuntu-wsl2-systemd-script/\\n$ bash ubuntu-wsl2-systemd-script.sh\\n# Enter your password and wait until the script has finished\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Restart WSL2 by opening a new PowerShell session and run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"wsl --shutdown\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a new WSL2 shell and run:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ systemctl --version\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your should find a version number \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"systemd 237\"), \" or a newer version of systemd.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unmask the snapd.service and restart it with the following command:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ sudo systemctl unmask snapd.service\\n$ sudo systemctl enable snapd.service\\n$ sudo systemctl start snapd.service\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Now you can use Snap command on WSL2.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Install .NET 6 preview with Snap\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run the following command to install the latest .NET Core SDK:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ sudo snap install dotnet-sdk --channel=6.0/beta --classic\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Wait several minutes until installation has finished.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The default .NET Core command is \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet-sdk.dotnet\"), \" to not conflict with a globally installed .NET Core version you may have.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can set an alias to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo snap alias dotnet-sdk.dotnet dotnet\"), \" and remove with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sudo snap unalias dotnet\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet-sdk.dotnet --version\"), \", you should find \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"6.0.100-preview.5.21302.13\"), \" or a newer version of .NET 6.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now use .NET 6 project.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Create todo app API project\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Create a new ASP.NET Core minimal APIs project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ dotnet-sdk.dotnet new web -o MinimalApi\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This will create a new ASP.NET Core minimal API inside \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MinimalApi\"), \" folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CD to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MinimalApi\"), \" folder and open VS Code with the command \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"code .\"), \".\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ cd MinimalApi\\n$ code .\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Current project structure\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can check project file structure with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tree\"), \" command.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ tree MinimalApi -I 'bin|obj'\\nMinimalApi\\n\\u251C\\u2500\\u2500 MinimalAPI.csproj\\n\\u251C\\u2500\\u2500 Program.cs\\n\\u251C\\u2500\\u2500 Properties\\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 launchSettings.json\\n\\u251C\\u2500\\u2500 appsettings.Development.json\\n\\u2514\\u2500\\u2500 appsettings.json\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Run the project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In VS Code, open an integrated terminal and run:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ dotnet-sdk.dotnet run\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a browser and navigate to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:5000\"), \", you should find \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Hello World!\"), \" message.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Install packages for using EF Core ORM\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In an integrated terminal, run the following commands:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ dotnet-sdk.dotnet add package Microsoft.EntityFrameworkCore --version 6.0.0-preview.5.21301.9\\n$ dotnet-sdk.dotnet add package Microsoft.EntityFrameworkCore.InMemory --version 6.0.0-preview.5.21301.9\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Create a single file todo app API\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace contents of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Program.cs\"), \" with the following source code:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"// Program.cs\\nusing System;\\nusing Microsoft.AspNetCore.Builder;\\nusing Microsoft.AspNetCore.Http;\\nusing Microsoft.EntityFrameworkCore;\\nusing Microsoft.Extensions.DependencyInjection;\\nusing Microsoft.Extensions.Hosting;\\n\\n// Create a builder.\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure EF to use in-memory database, for testing purpose only.\\nbuilder.Services.AddDbContext<TodoDbContext>(options => options.UseInMemoryDatabase(\\\"TodoItems\\\"));\\n\\n// Create a new web app.\\nawait using var app = builder.Build();\\n\\nif (app.Environment.IsDevelopment())\\n{\\n    app.UseDeveloperExceptionPage();\\n}\\n\\napp.MapGet(\\\"/\\\", (Func<string>)(() => \\\"Hello World!\\\"));\\n\\napp.MapGet(\\\"/todos\\\", async (http) =>\\n{\\n    var dbContext = http.RequestServices.GetRequiredService<TodoDbContext>();\\n    var todos = await dbContext.TodoItems.ToListAsync();\\n    await http.Response.WriteAsJsonAsync(todos);\\n});\\n\\napp.MapGet(\\\"/todos/{id}\\\", async (http) =>\\n{\\n    if (!http.Request.RouteValues.TryGetValue(\\\"id\\\", out var id))\\n    {\\n        http.Response.StatusCode = 400;\\n        return;\\n    }\\n\\n    var dbContext = http.RequestServices.GetRequiredService<TodoDbContext>();\\n    var todo = await dbContext.TodoItems.FindAsync(int.Parse(id.ToString()));\\n    if (todo == null)\\n    {\\n        http.Response.StatusCode = 404;\\n        return;\\n    }\\n\\n    await http.Response.WriteAsJsonAsync(todo);\\n});\\n\\napp.MapPost(\\\"/todos\\\", async (http) =>\\n{\\n    var todo = await http.Request.ReadFromJsonAsync<TodoItem>();\\n    var dbContext = http.RequestServices.GetRequiredService<TodoDbContext>();\\n\\n    dbContext.TodoItems.Add(todo);\\n    await dbContext.SaveChangesAsync();\\n    http.Response.StatusCode = 201;\\n});\\n\\napp.MapPut(\\\"/todos/{id}\\\", async (http) =>\\n{\\n    if (!http.Request.RouteValues.TryGetValue(\\\"id\\\", out var id))\\n    {\\n        http.Response.StatusCode = 400;\\n        return;\\n    }\\n\\n    var dbContext = http.RequestServices.GetRequiredService<TodoDbContext>();\\n    var todo = await dbContext.TodoItems.FindAsync(int.Parse(id.ToString()));\\n    if (todo == null)\\n    {\\n        http.Response.StatusCode = 404;\\n        return;\\n    }\\n\\n    var todoRequest = await http.Request.ReadFromJsonAsync<TodoItem>();\\n    todo.IsCompleted = todoRequest.IsCompleted;\\n    await dbContext.SaveChangesAsync();\\n    http.Response.StatusCode = 204;\\n});\\n\\napp.MapDelete(\\\"/todos/{id}\\\", async (http) =>\\n{\\n    if (!http.Request.RouteValues.TryGetValue(\\\"id\\\", out var id))\\n    {\\n        http.Response.StatusCode = 400;\\n        return;\\n    }\\n\\n    var dbContext = http.RequestServices.GetRequiredService<TodoDbContext>();\\n    var todo = await dbContext.TodoItems.FindAsync(int.Parse(id.ToString()));\\n    if (todo == null)\\n    {\\n        http.Response.StatusCode = 404;\\n        return;\\n    }\\n\\n    dbContext.TodoItems.Remove(todo);\\n    await dbContext.SaveChangesAsync();\\n\\n    http.Response.StatusCode = 204;\\n});\\n\\nawait app.RunAsync();\\n\\n// Define TodoItem model\\nclass TodoItem\\n{\\n    public int Id { get; set; }\\n\\n    public string Title { get; set; }\\n\\n    public bool IsCompleted { get; set; }\\n}\\n\\n// Define TodoDbContext\\nclass TodoDbContext : DbContext\\n{\\n    public TodoDbContext(DbContextOptions options) : base(options) { }\\n    public DbSet<TodoItem> TodoItems { get; set; }\\n}\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Save all files.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Run todo app API\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In an integrated terminal, run the following command:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ dotnet-sdk.dotnet run\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now test APIs with any client tools, e.g. Postman.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All available APIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:5000/todos with HTTP GET to get all existing todo items.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:5000/todos with HTTP POST to add a new todo item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:5000/todos/{id} with HTTP PUT to update an existing todo item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:5000/todos/{id} with HTTP DELETE to delete an existing todo item.\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Useful information and credit\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jose Barbosa for his amazing repository \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/kidchenko/dot-net-min-api\"\n  }, \"https://github.com/kidchenko/dot-net-min-api\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pre-installed Snapd distributions \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://snapcraft.io/docs/installing-snapd#heading--pre-installed\"\n  }, \"https://snapcraft.io/docs/installing-snapd#heading--pre-installed\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ubuntu-wsl2-systemd-script \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/DamionGans/ubuntu-wsl2-systemd-script\"\n  }, \"https://github.com/DamionGans/ubuntu-wsl2-systemd-script\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unmask Snapd \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://askubuntu.com/a/1258139\"\n  }, \"https://askubuntu.com/a/1258139\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/\"\n  }, \"ASP.NET Core updates in .NET 6 Preview 4\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#a-single-file-aspnet-core-minimal-apis","title":"A single file ASP.NET Core minimal APIs"},{"url":"#install-net-6-preview-on-wsl2-ubuntu","title":"Install .NET 6 preview on WSL2 Ubuntu","items":[{"url":"#fix-snap-on-wsl2","title":"Fix Snap on WSL2"},{"url":"#install-net-6-preview-with-snap","title":"Install .NET 6 preview with Snap"}]},{"url":"#create-todo-app-api-project","title":"Create todo app API project","items":[{"url":"#create-a-new-aspnet-core-minimal-apis-project","title":"Create a new ASP.NET Core minimal APIs project"},{"url":"#current-project-structure","title":"Current project structure"},{"url":"#run-the-project","title":"Run the project"},{"url":"#install-packages-for-using-ef-core-orm","title":"Install packages for using EF Core ORM"},{"url":"#create-a-single-file-todo-app-api","title":"Create a single file todo app API"},{"url":"#run-todo-app-api","title":"Run todo app API"}]},{"url":"#useful-information-and-credit","title":"Useful information and credit"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"web-frameworks/asp-net-core/asp-net-core-minimal-apis.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"2788a651-ca70-5162-8020-036d265ccc30"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}