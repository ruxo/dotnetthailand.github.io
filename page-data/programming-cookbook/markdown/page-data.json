{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/markdown","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"3b48a399-e748-5c8d-8f04-5992c3f02d6e","title":"Markdown","slug":"/programming-cookbook/markdown"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Markdown\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Syntax highlighting\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For some Markdown parser e.g. GitHub Markdown, they support syntax highlight in code block.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Therefore, you can add a language identifier to code block to enable syntax highlight.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, to syntax highlight Ruby code:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"```ruby\\nrequire 'redcarpet'\\nmarkdown = Redcarpet.new(\\\"Hello World!\\\")\\nputs markdown.to_html\\n```\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find more supported language identifiers. \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/github/linguist/blob/master/lib/linguist/languages.yml\"\n  }, \"https://github.com/github/linguist/blob/master/lib/linguist/languages.yml\"), \" and use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ace_mode\"), \" key\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Syntax highlight in .NET Thailand website\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For C#, please use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cs\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"csharp\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet\"), \". \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/PrismJS/prism/blob/master/components/prism-csharp.js#L367\"\n  }, \"REF\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"```cs\\n// Hello World! program\\n// Program.cs file\\nusing System;\\n\\nnamespace HelloWorld\\n{\\n    public class Program\\n    {\\n        public static void Main(string[] args)\\n        {\\n            Console.WriteLine(\\\"Hello World!\\\");\\n        }\\n    }\\n}\\n\\n```\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Useful links\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks#syntax-highlighting\"\n  }, \"https://docs.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks#syntax-highlighting\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ace.c9.io/\"\n  }, \"https://ace.c9.io/\"), \" Amazon Cloud Editor\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#syntax-highlighting","title":"Syntax highlighting"},{"url":"#syntax-highlight-in-net-thailand-website","title":"Syntax highlight in .NET Thailand website"},{"url":"#useful-links","title":"Useful links"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/markdown.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"d8cc45e74ec87b664a5c7f2ad7a707af6edac455","date":"2021-09-20 03:20"}},"pageContext":{"id":"3b48a399-e748-5c8d-8f04-5992c3f02d6e"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}